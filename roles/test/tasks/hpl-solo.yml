- name: Add Intel repos
  command: yum-config-manager --add-repo https://yum.repos.intel.com/setup/intelproducts.repo
  args:
    creates: /etc/yum.repos.d/intelproducts.repo
  become: yes
- name: Import Intel GPG keys
  command: rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
  become: yes
  # TODO: make idempotent
- name: Install Intel MPI
  yum:
    name: "intel-mpi-{{ impi_ver }}"
  become: yes
- name: Install MKL
  yum:
    name: "intel-mkl-{{ mkl_ver }}"
  become: yes
- name: Make directory
  file:
    path: "{{ jobdir }}"
    state: directory
    owner: "{{ ansible_user }}"
- name: Get compute memory (in megabytes)
  command: free --mega
  delegate_to: "{{ groups['cluster_compute'][0] }}"
  register: free
- name: Get all nodes
  shell: "sinfo --Node --noheader --format %N" # TODO: assumes only one partition, although actually excluding nodes not in the default partition should be fine.
  register: all_nodes
- name: Calculate excluded nodes
  set_fact:
    excluded_nodes: "{{ all_nodes.stdout_lines | difference(computes.stdout_lines) }}"
- name: Create sbatch script
  copy:
    dest: "{{ jobdir }}/hpl-solo.sh"
    content: |
      #!/usr/bin/bash

      #SBATCH --ntasks=1
      #SBATCH --output=%x.%a.out
      #SBATCH --error=%x.%a.out
      #SBATCH --exclusive
      #SBATCH --array=0-{{ computes.stdout_lines | length - 1 }}
      {% if excluded_nodes | length > 0 %}
      #SBATCH --exclude={{ excluded_nodes | join(',') }}
      {% endif %}
      
      source /opt/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh
      source /opt/intel/compilers_and_libraries/linux/mkl/bin/mklvars.sh intel64
      export I_MPI_DEBUG=4 # puts Node name in output
      export UCX_NET_DEVICES={{ openhpc_tests_ucx_net_devices }}
      
      cp $MKLROOT/benchmarks/mp_linpack/HPL.dat .
      mpirun -perhost 1 -np 1 $MKLROOT/benchmarks/mp_linpack/xhpl_intel64_dynamic -m {{ (free.stdout_lines[1].split()[1] | int * 0.8)}} -b {{ openhpc_tests_hpl_NB }} -p 1 -q 1

- name: Run hpl
  shell: sbatch --wait hpl-solo.sh
  become: no
  register:
  args:
    chdir: "{{ jobdir }}"
- name: Check HPL completed OK
  tags: grep
  shell: "grep '1 tests completed and passed residual checks' *.out"
  args:
    chdir: "{{ jobdir }}"
  changed_when: false
  register: passed
  failed_when: "passed.stdout_lines | length != computes.stdout_lines | length"
- name: Extract performance
  tags: grep
  shell: "grep '^W[R|C]' *.out"
  args:
    chdir: "{{ jobdir }}"
  changed_when: false
  register: perf
- tags: grep
  debug:
    msg: "{{ item[1].split()[0] }}: {{ item[0].split()[6] }} Gflops"
  loop: "{{ perf.stdout_lines | zip(computes.stdout_lines) | list }}"
  loop_control:
      label: "{{ item[0].split(':')[0] }}" # filename
