- name: Add Intel packages
  include: intel.yml
  become: yes
- name: Make directory
  file:
    path: "{{ jobdir }}"
    state: directory
    owner: "{{ ansible_user }}"
- name: Get compute memory (in megabytes)
  command: free --mega
  delegate_to: "{{ groups['cluster_compute'][0] }}"
  register: free
- name: Calculate total memory target
  set_fact:
    mem_target: "{{ (free.stdout_lines[1].split()[1] | int *  openhpc_tests_hpl_mem_frac) | int }}" # Intel don't tell you but the -b flag appears to be per node or process, not total!
- debug:
    msg: "Using 1 process per node targeting {{ mem_target }} MB ({{  openhpc_tests_hpl_mem_frac * 100 }}% of each node)"
- name: Get all nodes
  shell: "sinfo --Node --noheader --format %N" # TODO: assumes only one partition, although actually excluding nodes not in the default partition should be fine.
  register: all_nodes
- name: Calculate excluded nodes
  set_fact:
    excluded_nodes: "{{ all_nodes.stdout_lines | difference(computes.stdout_lines) }}"
- name: Create sbatch script
  copy:
    dest: "{{ jobdir }}/hpl-solo.sh"
    content: |
      #!/usr/bin/bash

      #SBATCH --ntasks=1
      #SBATCH --output=%x.%a.out
      #SBATCH --error=%x.%a.out
      #SBATCH --exclusive
      #SBATCH --array=0-{{ computes.stdout_lines | length - 1 }}
      {% if excluded_nodes | length > 0 %}
      #SBATCH --exclude={{ excluded_nodes | join(',') }}
      {% endif %}
      
      source /opt/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh
      source /opt/intel/compilers_and_libraries/linux/mkl/bin/mklvars.sh intel64
      export I_MPI_DEBUG=4 # puts Node name in output
      export UCX_NET_DEVICES={{ openhpc_tests_ucx_net_devices }}
      
      cp $MKLROOT/benchmarks/mp_linpack/HPL.dat .
      mpirun -perhost 1 -np 1 $MKLROOT/benchmarks/mp_linpack/xhpl_intel64_dynamic -m {{ mem_target }} -b {{ openhpc_tests_hpl_NB }} -p 1 -q 1

- name: Run hpl
  shell: sbatch --wait hpl-solo.sh
  become: no
  register:
  args:
    chdir: "{{ jobdir }}"
- name: Check HPL completed OK
  tags: postpro
  shell: "grep '1 tests completed and passed residual checks' *.out"
  args:
    chdir: "{{ jobdir }}"
  changed_when: false
  register: passed
  failed_when: "passed.stdout_lines | length != computes.stdout_lines | length"
- name: Extract performance
  tags: postpro
  shell: "grep '^W[R|C]' *.out"
  args:
    chdir: "{{ jobdir }}"
  changed_when: false
  register: perf
- tags: postpro
  debug:
    msg: "{{ item[1].split()[0] }}: {{ item[0].split()[6] | float }} Gflops"
  loop: "{{ perf.stdout_lines | zip(computes.stdout_lines) | list }}"
  loop_control:
      label: "{{ item[0].split(':')[0] }}" # filename
- tags: postpro
  set_fact:
    gflops_total: "{{ gflops_total | default(0.0) | int + item.split()[6] | float }}"
  loop: "{{ perf.stdout_lines }}"
  loop_control:
    label: "{{ item.split()[6] }}"
- tags: postpro
  debug:
    msg: "Mean [{{ computes.stdout_lines | length }} nodes]: {{ gflops_total | float / (computes.stdout_lines | length) }} Gflops"
